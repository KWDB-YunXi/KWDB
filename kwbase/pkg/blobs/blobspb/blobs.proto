// Copyright 2019 The Cockroach Authors.
// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto3";
package kwbase.blobs;
option go_package = "blobspb";

//import "gogoproto/gogo.proto";

// GetRequest is used to read a file from a remote node.
// It's path is specified by `filename`, which can either
// be a relative path from the base of external IO dir, or
// an absolute path, which must be contained in external IO dir.
message GetRequest {
  string filename = 1;
}

// GetResponse returns contents of the file requested by GetRequest.
message GetResponse {
  bytes payload = 1;
}

// PutRequest is used to write a payload to a remote node.
// It's path is specified by `filename`, as described in GetRequest.
message PutRequest {
  string filename = 1;
  bytes payload = 2;
}

// PutResponse is returned once a file has successfully been written by a PutRequest.
message PutResponse {
}

// GlobRequest is used to list all files that match the glob pattern on a given node.
message GlobRequest {
  string pattern = 1;
}

// GlobResponse responds with the list of files that matched the given pattern.
message GlobResponse {
  repeated string files = 1;
}

// SeekRequest is used to set cursor position.
message SeekRequest {
  string filename =1;
  int64 offset = 2;
  // whence decides the relative position: 0 means relative to the origin of the
  // file, 1 means relative to the current offset, and 2 means relative to the end.
  int32 whence  = 3;
}

// DeleteRequest is used to delete a file or empty directory on a remote node.
// It's path is specified by `filename`, as described in GetRequest.
message DeleteRequest {
  string filename = 1;
}

// DeleteResponse is returned once a file has been successfully deleted by DeleteRequest.
message DeleteResponse {
}

// StatRequest is used to get the file size of a file.
// It's path is specified by `filename`, as described in GetRequest.
message StatRequest {
  string filename = 1;
}

// BlobStat returns the file size of the file requested in StatRequest.
message BlobStat {
  int64 filesize = 1;
}

// StreamChunk contains a chunk of the payload we are streaming
message StreamChunk {
  bytes payload = 1;
}

// StreamResponse is used to acknowledge a stream ending.
message StreamResponse {
}

// Blob service allows for inter node file sharing.
// It is used by ExternalStorage when interacting with
// files that are stored on a node's local file system.
service Blob {
  rpc List(GlobRequest) returns (GlobResponse) {}
  rpc Seek(SeekRequest) returns (stream StreamChunk) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  rpc Stat(StatRequest) returns (BlobStat) {}
  rpc GetStream(GetRequest) returns (stream StreamChunk) {}
  rpc PutStream(stream StreamChunk) returns (StreamResponse) {}
}
