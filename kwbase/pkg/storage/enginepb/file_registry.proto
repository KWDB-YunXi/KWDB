// Copyright 2017 The Cockroach Authors.
// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto3";
package kwbase.storage.enginepb;
option go_package = "enginepb";

//import "gogoproto/gogo.proto";

enum RegistryVersion {
  // The only version so far.
  Base = 0;
}

// EnvType determines which rocksdb::Env is used and for what purpose.
enum EnvType {
  // The default Env when no encryption is used.
  // File using Plaintext are not recorded in the file registry.
  Plaintext = 0;
  // The Env using store-level keys.
  // Used only to read/write the data key registry.
  Store = 1;
  // The Env using data-level keys.
  // Used as the default rocksdb Env when encryption is enabled.
  Data = 2;
}

// Registry describes how a files are handled. This includes the
// rockdb::Env responsible for each file as well as opaque env details.
message FileRegistry {
  // version is currently always Base.
  RegistryVersion version = 1;
  // Map of filename -> FileEntry.
  // Filename is relative to the rocksdb dir if the file is inside it.
  // Otherwise it is an absolute path.
  // TODO(mberhault): figure out if we need anything special for Windows.
  map<string, FileEntry> files = 2;
}

message FileEntry {
  // Env type identifies which rocksdb::Env is responsible for this file.
  EnvType env_type = 1;

  // Env-specific fields for non-0 env. These are known by CCL code only.
  // This is a serialized protobuf. We cannot use protobuf.Any since we use
  // MessageLite in C++.
  bytes encryption_settings = 2;
}
