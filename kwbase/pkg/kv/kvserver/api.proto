// Copyright 2016 The Cockroach Authors.
// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto3";
package kwbase.kv.kvserver;
option go_package = "kvserver";

import "roachpb/internal_raft.proto";
import "storage/enginepb/mvcc.proto";
import "storage/enginepb/mvcc3.proto";
import "roachpb/api.proto";
import "gogoproto/gogo.proto";

// StoreRequestHeader locates a Store on a Node.
message StoreRequestHeader {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.NodeID"];
  int32 store_id = 2 [(gogoproto.customname) = "StoreID",
      (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.StoreID"];
}

// A CollectChecksumRequest asks the addressed replica for the result of a
// roachpb.ComputeChecksumRequest.
message CollectChecksumRequest {
  StoreRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  int64 range_id = 2 [(gogoproto.customname) = "RangeID",
      (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.RangeID"];
  // checksum_id identifies the corresponding roachpb.ComputeChecksumRequest.
  bytes checksum_id = 3 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "ChecksumID",
      (gogoproto.customtype) = "gitee.com/kwbasedb/kwbase/pkg/util/uuid.UUID"];
  bytes checksum = 4;
}

message CollectChecksumResponse {
  // The checksum is the sha512 hash of the requested computation. It is empty
  // if the computation failed.
  bytes checksum = 1;
  // snapshot is set if the roachpb.ComputeChecksumRequest had snapshot = true
  // and the response checksum is different from the request checksum.
  //
  // TODO(tschottdorf): with larger ranges, this is no longer tenable.
  // See https://gitee.com/kwbasedb/kwbase/issues/21128.
  roachpb.RaftSnapshotData snapshot = 2;
  // delta carries the stats of the range minus the recomputed stats.
  storage.enginepb.MVCCStatsDelta delta = 3 [(gogoproto.nullable) = false];
  // persisted carries the persisted stats of the replica.
  storage.enginepb.MVCCStats persisted = 4 [(gogoproto.nullable) = false];
}

message CollectReplicaStatusRequest {
  StoreRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];

  int64 range_id = 2 [(gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.RangeID"];
}

message CollectReplicaStatusResponse {
  StoreRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];

  roachpb.ReplicaStatus replica_status = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "ReplicaStatus",
    (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.ReplicaStatus"];
}

// WaitForApplicationRequest blocks until the addressed replica has applied the
// command with the specified lease index.
message WaitForApplicationRequest {
  StoreRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  int64 range_id = 2 [(gogoproto.customname) = "RangeID",
      (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.RangeID"];
  uint64 lease_index = 3;
}

message WaitForApplicationResponse {
}

message WaitForReplicaInitRequest {
  StoreRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  int64 range_id = 2 [(gogoproto.customname) = "RangeID",
      (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.RangeID"];
}

message WaitForReplicaInitResponse {
}

