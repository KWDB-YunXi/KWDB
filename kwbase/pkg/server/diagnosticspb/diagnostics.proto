// Copyright 2017 The Cockroach Authors.
// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto3";
package kwbase.server.diagnosticspb;
option go_package = "diagnosticspb";

import "build/info.proto";
import "config/zonepb/zone.proto";
import "gogoproto/gogo.proto";
import "roachpb/app_stats.proto";
import "sql/sqlbase/structured.proto";
import "roachpb/metadata.proto";

message DiagnosticReport {
  NodeInfo node = 1 [(gogoproto.nullable) = false];
  repeated StoreInfo stores = 2  [(gogoproto.nullable) = false];
  repeated sql.sqlbase.TableDescriptor schema = 3 [(gogoproto.nullable) = false];
  repeated sql.CollectedStatementStatistics sql_stats = 4 [(gogoproto.nullable) = false];
  map<string, string> altered_settings = 6;
  map<int64, config.zonepb.ZoneConfig> zone_configs = 8 [(gogoproto.nullable) = false];
  map<string, int32> feature_usage = 9 [(gogoproto.nullable) = false];


  map<string, int64> legacy_unimplemented_errors = 5;
  map<string, int64> legacy_error_counts = 7;
  }

message NodeInfo {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID", (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.NodeID"];
  int64 bytes = 2;
  int64 key_count = 3;
  int64 range_count = 4;
  roachpb.Locality locality = 5 [(gogoproto.nullable) = false];

  HardwareInfo hardware = 6 [(gogoproto.nullable) = false];
  OSInfo os = 7 [(gogoproto.nullable) = false];
  build.Info build = 8 [(gogoproto.nullable) = false];
  int64 uptime = 9;
  string license_type = 10;
  TopologyInfo topology = 11 [(gogoproto.nullable) = false];
}

message StoreInfo {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID", (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.NodeID"];
  int32 store_id = 2 [(gogoproto.customname) = "StoreID", (gogoproto.casttype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.StoreID"];
  int64 bytes = 3;
  int64 key_count = 4;
  int64 range_count = 5;

  int64 capacity  = 6;
  int64 available = 7;
  int64 used = 8;

  int64 encryption_algorithm = 9;

  // Want: sync times, observed read/write speeds
}

message CPUInfo {
  int32 numcpu = 1; // go's reported runtime.NUMCPU()
  int32 sockets = 2; // number of cpus reported
  int32 cores = 3;  // gopsutil's reported cores for first cpu
  string model = 4; // reported model name e.g. `Intel(R) Core(TM) i7-7920HQ CPU @ 3.10GHz`
  float mhz = 5;  // speed of first cpu e.g. 3100
  repeated string features = 6; // cpu feature flags for first cpu
}

message HardwareInfo {
  string virtualization = 1;
  CPUInfo cpu = 2 [(gogoproto.nullable) = false];
  MemInfo mem = 3 [(gogoproto.nullable) = false];
  float loadavg15 = 4;
  string provider = 5;
  string instance_class = 6;
}

message OSInfo {
  string family = 1;
  string platform = 2;
  string version = 3;
}

message MemInfo {
  uint64 total = 1;
  uint64 available = 2;
}

message TopologyInfo {
  string provider = 1;
  string region = 2;
}
