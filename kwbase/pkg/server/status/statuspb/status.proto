// Copyright 2015 The Cockroach Authors.
// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto3";
package kwbase.server.status.statuspb;
option go_package = "statuspb";

import "roachpb/metadata.proto";
import "build/info.proto";
import "gogoproto/gogo.proto";

// StoreStatus records the most recent values of metrics for a store.
message StoreStatus {
  roachpb.StoreDescriptor desc = 1 [(gogoproto.nullable) = false];
  map<string, double> metrics = 2;
}

// NodeStatus records the most recent values of metrics for a node.
message NodeStatus {
  roachpb.NodeDescriptor desc = 1 [(gogoproto.nullable) = false];
  build.Info build_info = 2 [(gogoproto.nullable) = false];
  int64 started_at = 3;
  int64 updated_at = 4;
  map<string, double> metrics = 5;
  repeated StoreStatus store_statuses = 6 [(gogoproto.nullable) = false];
  repeated string args = 7;
  repeated string env = 8;
  // latencies is a map of nodeIDs to nanoseconds which is the latency
  // between this node and the other node.
  //
  // NOTE: this is deprecated and is only set if the min supported
  //       cluster version is >= VersionRPCNetworkStats.
  map<int32, int64> latencies = 9 [
    (gogoproto.nullable) = false,
    (gogoproto.castkey) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.NodeID"
  ];

  message NetworkActivity {
    int64 incoming = 1; // in bytes
    int64 outgoing = 2; // in bytes
    int64 latency = 3;  // in nanoseconds
  }
  // activity is a map of nodeIDs to network statistics from this node
  // to other nodes.
  map<int32, NetworkActivity> activity = 10 [
    (gogoproto.nullable) = false,
    (gogoproto.castkey) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.NodeID"
  ];
  // total_system_memory is the total RAM available to the system
  // (or, if possible, the memory available to the cgroup this process is in)
  // in bytes.
  int64 total_system_memory = 11;
  // num_cpus is the number of logical CPUs on this machine.
  int32 num_cpus = 12;
}

// A HealthAlert is an undesired condition detected by a server which should be
// exposed to the operators.
message HealthAlert {
  // store_id is zero for alerts not specific to a store (i.e. apply at the node level).
  int32 store_id = 1 [
    // NB: trying to make this nullable does not work with the custom type. You need a
    // pointer type as the custom type, but that breaks protoc-gen-gogoroach.
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "gitee.com/kwbasedb/kwbase/pkg/roachpb.StoreID",
    (gogoproto.customname) = "StoreID"
  ];
  enum Category {
    METRICS = 0;
    NETWORK = 1;
  }
  Category category = 2;
  string description = 3;
  double value = 4;
}

// HealthCheckResult holds a number of HealthAlerts.
message HealthCheckResult{
  repeated HealthAlert alerts = 1 [(gogoproto.nullable) = false];
}
