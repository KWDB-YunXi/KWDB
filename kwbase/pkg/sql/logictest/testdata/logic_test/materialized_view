statement ok
CREATE TABLE t (x INT, y INT);
INSERT INTO t VALUES (1, 2), (3, 4), (5, 6)

statement ok
CREATE MATERIALIZED VIEW v AS SELECT x, y FROM t

# Ensure that materialized views show up in SHOW TABLES.
query T
SELECT table_name FROM [SHOW TABLES] WHERE table_type = 'MATERIALIZED VIEW'
----
v

query II rowsort
SELECT * FROM v
----
1 2
3 4
5 6

# If we update t, the view shouldn't change.
statement ok
INSERT INTO t VALUES (7, 8)

query II rowsort
SELECT * FROM v
----
1 2
3 4
5 6

# Now refresh the view.
statement ok
REFRESH MATERIALIZED VIEW v

# The update should be visible now, as v has been recomputed.
query II rowsort
SELECT * FROM v
----
1 2
3 4
5 6
7 8

# Now add an index to the view, and use it.
statement ok
CREATE INDEX i ON v (y)

query I rowsort
SELECT y FROM v@i WHERE y > 4
----
6
8

# Now update t and refresh the view -- the index should be updated as well.
statement ok
INSERT INTO t VALUES (9, 10)

statement ok
REFRESH MATERIALIZED VIEW v

query I rowsort
SELECT y FROM v WHERE y > 4
----
6
8
10

# Drop the index now.
statement ok
DROP INDEX v@i

query I rowsort
SELECT y FROM v WHERE y > 4
----
6
8
10

# We can't refresh with an explicit txn.
statement ok
BEGIN

statement error pq: cannot refresh view in an explicit transaction
REFRESH MATERIALIZED VIEW v

statement ok
ROLLBACK

statement error pq: cannot mutate materialized view "v"
INSERT INTO v VALUES (1, 2)

statement error pq: cannot mutate materialized view "v"
UPDATE v SET x = 1 WHERE y = 1

statement error pq: cannot mutate materialized view "v"
DELETE FROM v WHERE x = 1

statement error pq: "v" is not a table
TRUNCATE v

# Test that a materialized view with a unique index errors.
statement ok
CREATE TABLE dup (x INT);
CREATE MATERIALIZED VIEW v_dup AS SELECT x FROM dup;

statement error pq: cannot create unique index on materialized view
CREATE UNIQUE INDEX i ON v_dup (x);

# We shouldn't be able to mix materialized and non materialized views in DDLs.
statement ok
CREATE VIEW normal_view AS SELECT 1;
CREATE MATERIALIZED VIEW materialized_view AS SELECT 1;

statement error pq: "materialized_view" is a materialized view
ALTER VIEW materialized_view RENAME TO newname

statement error pq: "normal_view" is not a materialized view
ALTER MATERIALIZED VIEW normal_view RENAME TO newname

statement error pq: "materialized_view" is a materialized view
DROP VIEW materialized_view

statement error pq: "normal_view" is not a materialized view
DROP MATERIALIZED VIEW normal_view

# Regression test for null data in materialized views.
statement ok
CREATE TABLE t57108 (id INT PRIMARY KEY, a INT);
INSERT INTO t57108 VALUES(1, 1), (2, NULL);
CREATE MATERIALIZED VIEW t57108_v AS SELECT t57108.a from t57108;

query I rowsort
SELECT * FROM t57108_v
----
NULL
1

statement ok
CREATE MATERIALIZED VIEW test_privilege AS SELECT 1;

user testuser

# testuser should not be able to refresh the materialized view without privilege.
statement error pq: user testuser does not have UPDATE privilege on relation test_privilege
REFRESH MATERIALIZED VIEW test_privilege

user root

statement ok
GRANT root TO testuser

user testuser

# testuser should now be able to refresh the materialized view as a member of
# root or testusr has update privilege on materialized view.
statement ok
REFRESH MATERIALIZED VIEW test_privilege

statement ok
REVOKE root FROM testuser

user root

statement ok
GRANT CREATE ON DATABASE test TO testuser

statement ok
GRANT UPDATE ON test_privilege TO testuser

# root should still be able to refresh the view.
statement ok
REFRESH MATERIALIZED VIEW test_privilege

user testuser

# testuser should now be able to refresh the materialized view.
statement ok
REFRESH MATERIALIZED VIEW test_privilege

user root

statement ok
CREATE TABLE  t1 ( a INT);
CREATE TABLE  t2 ( b INT);
insert into t1 values(1);
insert into t2 values(0);

statement error division by zero
create materialized view mv1 as select t1.a/t2.b from t1,t2;

statement error division by zero
create materialized view mv1 as select t1.a/t2.b from t1,t2;

statement error division by zero
create table mv1 as select t1.a/t2.b from t1,t2;

statement ok
DROP TABLE t1;
DROP TABLE t2;

statement ok
CREATE TABLE  t1 (a INT,b int primary key);
insert into t1 values(1,1);
create materialized view mv1 as select b from t1;

statement error pq: can not alter column type because there are objects that depend on it
ALTER TABLE t1 AlTER COLUMN b SET DATA TYPE int8;

statement ok
drop materialized view mv1;

statement ok
ALTER TABLE t1 AlTER COLUMN b SET DATA TYPE int8;

statement ok
create view v1 as select b from t1;

statement error pq: can not alter column type because there are objects that depend on it
ALTER TABLE t1 AlTER COLUMN b SET DATA TYPE int;

statement ok
DROP VIEW v1;
CREATE TABLE t2(a int, b int, foreign key(b) references t1(b));

statement ok
ALTER TABLE t1 AlTER COLUMN b SET DATA TYPE int8;

statement ok
drop table t2

statement ok
ALTER TABLE t1 AlTER COLUMN b SET DATA TYPE int8;

statement ok
drop table t1;
