// Copyright 2017 The Cockroach Authors.
// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
//
// Data structures and basic infrastructure for distributed SQL APIs. See
// docs/RFCS/distributed_sql.md.
// All the concepts here are "physical plan" concepts.

syntax = "proto3";
package kwbase.sql.stats;
option go_package = "stats";

import "gogoproto/gogo.proto";

// HistogramData encodes the data for a histogram, which captures the
// distribution of values on a specific column.
message HistogramData {
  message Bucket {
    // The estimated number of values that are equal to upper_bound.
    int64 num_eq = 1;

    // The estimated number of values in the bucket (excluding those
    // that are equal to upper_bound). Splitting the count into two
    // makes the histogram effectively equivalent to a histogram with
    // twice as many buckets, with every other bucket containing a
    // single value. This might be particularly advantageous if the
    // histogram algorithm makes sure the top "heavy hitters" (most
    // frequent elements) are bucket boundaries (similar to a
    // compressed histogram).
    int64 num_range = 2;

    // The estimated number of distinct values in the bucket (excluding
    // those that are equal to upper_bound). This is a floating point
    // value because it is estimated by distributing the known distinct
    // count for the column among the buckets, in proportion to the number
    // of rows in each bucket. This value is in fact derived from the rest
    // of the data, but is included to avoid re-computing it later.
    double distinct_range = 4;

    // The upper boundary of the bucket. The column values for the upper bound
    // are encoded using the ascending key encoding of the column type.
    bytes upper_bound = 3;
  }

  // Value type for the column.
  bytes column_type = 2 [(gogoproto.nullable) = false, (gogoproto.customtype) = "gitee.com/kwbasedb/kwbase/pkg/sql/types.T"];

  // Histogram buckets. Note that NULL values are excluded from the
  // histogram.
  repeated Bucket buckets = 1 [(gogoproto.nullable) = false];

  message SortedHistogramBucket {
    // The estimated number of row count within the timestamp range.
    uint64 rowCount = 1;

    // The estimated number of unordered row count within the timestamp range.
    uint64 unorderedRowCount = 2;

    // The estimated number of unordered entities within the timestamp range.
    double unorderedEntities = 3;

    // The estimated number of ordered entities within the timestamp range.
    double orderedEntities = 4;

    bytes upper_bound = 5;
  }

  // Sorted Histogram buckets. Note that NULL values are excluded from the
  // histogram.
  repeated SortedHistogramBucket sortedBuckets = 3 [(gogoproto.nullable) = false];
}
