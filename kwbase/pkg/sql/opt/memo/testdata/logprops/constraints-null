exec-ddl
CREATE TABLE t (a INT, b BOOL, c STRING)
----

opt
SELECT * FROM t WHERE a = NULL
----
values
 ├── columns: a:1(int4!null) b:2(bool!null) c:3(string!null)
 ├── cardinality: [0 - 0]
 ├── key: ()
 ├── fd: ()-->(1-3)
 └── prune: (1-3)

opt
SELECT * FROM t WHERE a < NULL
----
values
 ├── columns: a:1(int4!null) b:2(bool!null) c:3(string!null)
 ├── cardinality: [0 - 0]
 ├── key: ()
 ├── fd: ()-->(1-3)
 └── prune: (1-3)

opt
SELECT * FROM t WHERE a IS NULL
----
select
 ├── columns: a:1(int4) b:2(bool) c:3(string)
 ├── fd: ()-->(1)
 ├── prune: (2,3)
 ├── scan t
 │    ├── columns: a:1(int4) b:2(bool) c:3(string)
 │    └── prune: (1-3)
 └── filters
      └── is [type=bool, outer=(1), constraints=(/1: [/NULL - /NULL]; tight), fd=()-->(1)]
           ├── variable: a:1 [type=int4]
           └── null [type=unknown]

opt
SELECT * FROM t WHERE a IS NOT NULL
----
select
 ├── columns: a:1(int4!null) b:2(bool) c:3(string)
 ├── prune: (2,3)
 ├── scan t
 │    ├── columns: a:1(int4) b:2(bool) c:3(string)
 │    └── prune: (1-3)
 └── filters
      └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
           ├── variable: a:1 [type=int4]
           └── null [type=unknown]

opt
SELECT * FROM t WHERE b IS NULL AND c IS NULL
----
select
 ├── columns: a:1(int4) b:2(bool) c:3(string)
 ├── fd: ()-->(2,3)
 ├── prune: (1)
 ├── scan t
 │    ├── columns: a:1(int4) b:2(bool) c:3(string)
 │    └── prune: (1-3)
 └── filters
      ├── is [type=bool, outer=(2), constraints=(/2: [/NULL - /NULL]; tight), fd=()-->(2)]
      │    ├── variable: b:2 [type=bool]
      │    └── null [type=unknown]
      └── is [type=bool, outer=(3), constraints=(/3: [/NULL - /NULL]; tight), fd=()-->(3)]
           ├── variable: c:3 [type=string]
           └── null [type=unknown]

opt
SELECT * FROM t WHERE b IS NOT NULL AND c IS NOT NULL
----
select
 ├── columns: a:1(int4) b:2(bool!null) c:3(string!null)
 ├── prune: (1)
 ├── scan t
 │    ├── columns: a:1(int4) b:2(bool) c:3(string)
 │    └── prune: (1-3)
 └── filters
      ├── is-not [type=bool, outer=(2), constraints=(/2: (/NULL - ]; tight)]
      │    ├── variable: b:2 [type=bool]
      │    └── null [type=unknown]
      └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
           ├── variable: c:3 [type=string]
           └── null [type=unknown]

exec-ddl
CREATE TABLE xy (
  x INT,
  y INT
)
----

# Test that we get a not-NULL constraint on x.
opt
SELECT * FROM xy WHERE x > abs(y)
----
select
 ├── columns: x:1(int4!null) y:2(int4)
 ├── scan xy
 │    ├── columns: x:1(int4) y:2(int4)
 │    └── prune: (1,2)
 └── filters
      └── gt [type=bool, outer=(1,2), constraints=(/1: (/NULL - ])]
           ├── variable: x:1 [type=int4]
           └── function: abs [type=int]
                └── variable: y:2 [type=int4]

# Test that we get a not-NULL constraint on x.
opt
SELECT * FROM xy WHERE sin(x::float)::int < x
----
select
 ├── columns: x:1(int4!null) y:2(int4)
 ├── prune: (2)
 ├── scan xy
 │    ├── columns: x:1(int4) y:2(int4)
 │    └── prune: (1,2)
 └── filters
      └── gt [type=bool, outer=(1), constraints=(/1: (/NULL - ])]
           ├── variable: x:1 [type=int4]
           └── cast: INT4 [type=int4]
                └── function: sin [type=float]
                     └── cast: FLOAT8 [type=float]
                          └── variable: x:1 [type=int4]

# Test that we get a not-NULL constraint on x and y.
opt
SELECT * FROM xy WHERE x > y
----
select
 ├── columns: x:1(int4!null) y:2(int4!null)
 ├── scan xy
 │    ├── columns: x:1(int4) y:2(int4)
 │    └── prune: (1,2)
 └── filters
      └── gt [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
           ├── variable: x:1 [type=int4]
           └── variable: y:2 [type=int4]

# Test that we get a not-NULL constraint on x and y.
opt
SELECT * FROM xy WHERE x = y
----
select
 ├── columns: x:1(int4!null) y:2(int4!null)
 ├── fd: (1)==(2), (2)==(1)
 ├── scan xy
 │    ├── columns: x:1(int4) y:2(int4)
 │    └── prune: (1,2)
 └── filters
      └── eq [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ]), fd=(1)==(2), (2)==(1)]
           ├── variable: x:1 [type=int4]
           └── variable: y:2 [type=int4]
