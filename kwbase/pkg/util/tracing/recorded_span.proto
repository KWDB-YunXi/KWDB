// Copyright 2017 The Cockroach Authors.
// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto3";
package kwbase.util.tracing;
option go_package = "tracing";

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// LogRecord is a log message recorded in a traced span.
message LogRecord {
  // Time of the log record.
  google.protobuf.Timestamp time = 1 [(gogoproto.nullable) = false,
                                     (gogoproto.stdtime) = true];
  message Field {
    string key = 1;
    string value = 2;
  }
  // Fields with values converted to strings.
  repeated Field fields = 2 [(gogoproto.nullable) = false];
}

message mapTag {
  map<string, string> tags = 1;
}

// RecordedSpan is a span that is part of a recording. It can be transferred
// over the wire for snowball tracing.
message RecordedSpan {
  option (gogoproto.goproto_stringer) = false;

  // ID of the trace; spans that are part of the same hierarchy share
  // the same trace ID.
  uint64 trace_id = 1 [(gogoproto.customname) = "TraceID"];
  // ID of the span.
  uint64 span_id = 2 [(gogoproto.customname) = "SpanID"];
  // Span ID of the parent span.
  uint64 parent_span_id = 3 [(gogoproto.customname) = "ParentSpanID"];
  // Operation name.
  string operation = 4;
  // Baggage items get passed from parent to child spans (even through gRPC).
  // Notably, snowball tracing uses a special `sb` baggage item.
  map<string, string> baggage = 5;
  // Tags associated with the span.
  map<string, string> tags = 6;
  // Time when the span was started.
  google.protobuf.Timestamp start_time = 7 [(gogoproto.nullable) = false,
                                            (gogoproto.stdtime) = true];
  // Duration is the span's duration, measured from start to Finish().
  //
  // A spans whose recording is collected before it's finished will have the
  // duration set as the time of collection - start_time. Such a span will have
  // an "unfinished" tag.
  google.protobuf.Duration duration = 8 [(gogoproto.nullable) = false,
                                         (gogoproto.stdduration) = true];

  // Events logged in the span.
  repeated LogRecord logs = 9 [(gogoproto.nullable) = false];

  // Stats collected in this span.
  google.protobuf.Any stats = 10;

  // TsTags associated with the span.
  map<int32, mapTag> ts_tags = 11;
}

// NormalizedSpan is a representation of a RecordedSpan from a trace with all
// its children embedded, recursively. This JSON serialization of this proto is
// used in the system.statement_diagnostics.trace column.
//
// See RecordedSpan for the description of the fields.
message NormalizedSpan {
  string operation = 1;
  map<string, string> tags = 2;
  google.protobuf.Timestamp start_time = 3 [(gogoproto.nullable) = false,
                                           (gogoproto.stdtime) = true];
  google.protobuf.Duration duration = 4 [(gogoproto.nullable) = false,
                                        (gogoproto.stdduration) = true];
  repeated LogRecord logs = 5 [(gogoproto.nullable) = false];
  repeated NormalizedSpan children = 6 [(gogoproto.nullable) = false];
}
